{
  "openapi": "3.0.1",
  "info": {
    "title": "Babyelefant",
    "description": "this is the API documentation for the REST API Babyelefant",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "patekmoritz@yahoo.at"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://https://babyelefantapi.pressler.dev/api"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Requests for authentification"
    },
    {
      "name": "user",
      "description": "Requests for users"
    },
    {
      "name": "event",
      "description": "Requests for events"
    },
    {
      "name": "camera",
      "description": "Requests for cameras"
    },
    {
      "name": "distance",
      "description": "Requests for distance data"
    }
  ],
  "paths": {
    "/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create new user",
        "description": "this route creates a new user.",
        "operationId": "createUser",
        "requestBody": {
          "description": "Created user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get all user",
        "operationId": "getAllUsers",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "No users found",
            "content": {}
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "security": [],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid username/password supplied",
            "content": {}
          }
        }
      }
    },
    "/users/{id}": {
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The User with id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Updated user",
        "description": "This can only be done by the logged in user.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "name that need to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated user object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid user supplied",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/cameras/{id}": {
      "get": {
        "tags": [
          "camera"
        ],
        "summary": "Get all cameras for event",
        "operationId": "getCamerasForEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Camera"
                }
              }
            }
          },
          "404": {
            "description": "cameras not found or event has no cameras",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "camera"
        ],
        "summary": "Updated camera",
        "operationId": "changeCameraInformation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Camera that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated camera object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Camera"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid Camera supplied",
            "content": {}
          },
          "404": {
            "description": "Camera not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "post": {
        "tags": [
          "camera"
        ],
        "summary": "Calibrate camera",
        "operationId": "calibrateCamera",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Camera that needs to be calibrated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid Camera supplied",
            "content": {}
          },
          "404": {
            "description": "Camera not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "delete": {
        "tags": [
          "camera"
        ],
        "summary": "Delete camera",
        "operationId": "deleteCamera",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Camera with id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "Camera not",
            "content": {}
          }
        }
      }
    },
    "/cameras": {
      "post": {
        "tags": [
          "camera"
        ],
        "summary": "Create new camera",
        "description": "this route creates a new camera.",
        "operationId": "addCamera",
        "requestBody": {
          "description": "Created camera object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Camera"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/events": {
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Get all events",
        "operationId": "getAllEvents",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "No events found",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "event"
        ],
        "summary": "Create new event",
        "description": "this route creates a new event.",
        "operationId": "addEvent",
        "requestBody": {
          "description": "Created event object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "default": {
            "description": "successful operation",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/events/{id}": {
      "delete": {
        "tags": [
          "event"
        ],
        "summary": "Delete event",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Event with id that needs to be deleted",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid id supplied",
            "content": {}
          },
          "404": {
            "description": "Event not found",
            "content": {}
          }
        }
      },
      "put": {
        "tags": [
          "event"
        ],
        "summary": "Updated event",
        "operationId": "changeEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Event that needs to be updated",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Updated event object",
          "content": {
            "*/*": {
              "schema": {
                "$ref": "#/components/schemas/Event"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "Invalid Event supplied",
            "content": {}
          },
          "404": {
            "description": "Event not found",
            "content": {}
          }
        },
        "x-codegen-request-body-name": "body"
      },
      "get": {
        "tags": [
          "event"
        ],
        "summary": "Get all events for a user id",
        "operationId": "getEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "returns event with id",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "404": {
            "description": "No event found",
            "content": {}
          }
        }
      }
    },
    "/distanceData": {
      "get": {
        "tags": [
          "distance"
        ],
        "summary": "Get all distances",
        "operationId": "getAllDistanceData",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distance"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Distance"
                }
              }
            }
          },
          "404": {
            "description": "No distance data found",
            "content": {}
          }
        }
      }
    },
    "/distanceData/{id}": {
      "get": {
        "tags": [
          "distance"
        ],
        "summary": "Get all distance data for event",
        "operationId": "getDistanceDataPerEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "id of the event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Distance"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Distance"
                }
              }
            }
          },
          "404": {
            "description": "event has no distance data",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "u_name": {
            "type": "string"
          },
          "u_pwd": {
            "type": "string"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Event": {
        "type": "object",
        "properties": {
          "e_name": {
            "type": "string"
          },
          "e_u_user": {
            "type": "integer",
            "format": "int32"
          },
          "e_adress": {
            "type": "string"
          }
        },
        "xml": {
          "name": "Event"
        }
      },
      "Camera": {
        "type": "object",
        "properties": {
          "c_link": {
            "type": "string"
          },
          "c_e_event": {
            "type": "integer",
            "format": "int32"
          },
          "c_maxdistance": {
            "type": "integer",
            "format": "int32"
          },
          "c_cameraheight": {
            "type": "integer",
            "format": "int32"
          }
        },
        "xml": {
          "name": "Camera"
        }
      },
      "Distance": {
        "type": "object",
        "properties": {
          "d_min": {
            "type": "integer",
            "format": "int32"
          },
          "d_avg": {
            "type": "integer",
            "format": "int32"
          },
          "d_numberofpeople": {
            "type": "integer",
            "format": "int32"
          },
          "d_e_event": {
            "type": "integer",
            "format": "int32"
          },
          "d_datetime": {
            "type": "string"
          }
        }
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "type": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}